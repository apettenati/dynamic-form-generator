{"version":3,"sources":["data.js","components/FormField.tsx","components/Results.tsx","components/Form.tsx","index.tsx"],"names":["data","tag","name","type","human_label","conditional","show_if","value","now","Date","getFullYear","getMonth","getDate","setField","field","className","htmlFor","FormField","formState","conditionalFunction","formItem","filter","item","length","getConditionalValue","Results","useState","formResults","setFormResults","useEffect","results","reduce","acc","cur","resultsString","JSON","stringify","Form","setFormState","showResults","setShowResults","newFormState","form","document","querySelector","i","checked","push","onChange","e","target","newState","index","findIndex","element","onSubmit","preventDefault","map","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2df3b75a.chunk.js","sourcesContent":["export const data = [\n  {\n    tag: 'input',\n    name: 'first_name',\n    type: 'text',\n    human_label: 'First Name',\n  },\n  {\n    tag: 'input',\n    name: 'last_name',\n    type: 'text',\n    human_label: 'Last Name',\n  },\n  {\n    tag: 'input',\n    name: 'email',\n    type: 'email',\n    human_label: 'Email Address',\n  },\n  {\n    tag: 'input',\n    name: 'phone_number',\n    type: 'text',\n    human_label: 'Phone Number',\n  },\n  {\n    tag: 'input',\n    name: 'job_title',\n    type: 'text',\n    human_label: 'Job Title',\n  },\n  {\n    tag: 'input',\n    name: 'date_of_birth',\n    type: 'date',\n    human_label: 'Date of Birth',\n  },\n  {\n    tag: 'input',\n    name: 'parental_consent',\n    type: 'checkbox',\n    human_label: 'Parental Consent',\n    conditional: {\n      name: 'date_of_birth',\n      show_if: (value) => {\n        const now = new Date()\n        return (\n          value >=\n          new Date(now.getFullYear() - 13, now.getMonth(), now.getDate())\n        )\n      },\n    },\n  },\n]\n","import { FormData, FormStateItem } from '../types'\n\ninterface FormFieldProps {\n  field: FormData\n  formState: FormStateItem[]\n}\n\nfunction setField(field: FormData): JSX.Element {\n  return (\n    <label className={field.type} htmlFor={field.name}>\n      {field.human_label}\n      <input name={field.name} type={field.type}></input>\n    </label>\n  )\n}\n\nexport default function FormField({\n  field,\n  formState,\n}: FormFieldProps): JSX.Element | null {\n  function getConditionalValue() {\n    if (!field.conditional) return\n\n    // Get conditional data\n    const conditionalFunction = field.conditional.show_if\n    const name = field.conditional.name\n\n    // Get matching form item\n    const formItem = formState.filter((item) => item.name === name)\n\n    // TODO: handle error that unique item name was not found\n    if (formItem.length !== 1) return\n\n    // Look up type and run the function the correct type\n    const type = formItem[0].type\n    if (type === 'date') {\n      const value = formItem[0].value\n      const date = new Date(value)\n      const showIf = conditionalFunction(date)\n      return showIf\n    } else {\n      const value = formItem[0].value\n      const showIf = conditionalFunction(value)\n      return showIf\n    }\n  }\n\n  // Do not generate if the field tag is not a valid input field\n  if (field.tag !== 'input') return null\n\n  // If there is no conditional statement, render the input field\n  if (!field.conditional) return setField(field)\n\n  // If there is a conditional, evaluate the show_if function\n  const showIf = getConditionalValue()\n\n  // If the result is false, do not generate the field\n  if (!showIf) return null\n\n  // If the result is true, generate the field\n  return setField(field)\n}\n","import { useEffect, useState } from 'react'\nimport { FormStateItem } from '../types'\n\ninterface ResultsProps {\n  formState: FormStateItem[]\n}\n\nexport default function Results({ formState }: ResultsProps): JSX.Element {\n  const [formResults, setFormResults] = useState('')\n\n  useEffect(() => {\n    const results = formState.reduce((acc, cur) => ({\n      ...acc, [cur.name]: cur.value\n    }), {})\n\n    const resultsString = JSON.stringify(results, null, 2)\n    setFormResults(resultsString)\n  }, [formState])\n\n  return (\n    <div className='container'>\n      <h2>Results </h2>\n      <pre className='results'> {formResults}\n      </pre>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { data } from '../data'\nimport FormField from './FormField'\nimport Results from './Results'\nimport { FormStateItem } from '../types'\n\nexport default function Form(): JSX.Element {\n  const [formState, setFormState] = useState<FormStateItem[]>([])\n  const [showResults, setShowResults] = useState<boolean>(false)\n\n  useEffect(() => {\n    // Initialize form state\n    const newFormState = [] as FormStateItem[]\n    const form = document.querySelector('form') as any\n    if (form === null) return\n    for (let i = 0; i < form.length; i++) {\n      const type = form[i].type\n      const name = form[i].name\n      const value = type === 'checkbox' ? form[i].checked : form[i].value\n      // do not add the submit button to the array\n      if (type === 'submit') {\n        continue\n      }\n      newFormState.push({ name, value, type })\n    }\n    setFormState(newFormState)\n  }, [])\n\n  function onSubmit(e: any) {\n    // Update form state\n    const newFormState = [] as FormStateItem[]\n    e.preventDefault()\n    for (let i = 0; i < e.target.length; i++) {\n      const type = e.target[i].type\n      const name = e.target[i].name\n      const value =\n        type === 'checkbox' ? e.target[i].checked : e.target[i].value\n      // do not add the submit button to the array\n      if (type === 'submit') {\n        continue\n      }\n      newFormState.push({ name, value, type })\n    }\n    setFormState(newFormState)\n\n    //Show results\n    setShowResults(true)\n    return\n  }\n\n  function onChange(e: any) {\n    // Update state with single changed field\n    setShowResults(false)\n    const type = e.target.type\n    const name = e.target.name\n    const value = type === 'checkbox' ? e.target.checked : e.target.value\n\n    const newState = [...formState]\n    const index = newState.findIndex((element) => element.name === name)\n    newState[index] = { name, value, type }\n\n    setFormState(newState)\n    return\n  }\n\n  return (\n    <div className='app'>\n      <div className='container'>\n        <h2>Form </h2>\n        <form onChange={(e) => onChange(e)} onSubmit={(e) => onSubmit(e)}>\n          {data.map((field, i) => (\n            <FormField key={i} field={field} formState={formState} />\n          ))}\n          <input id='submit' type='submit' value='Submit' />\n        </form>\n      </div>\n      {showResults && <Results formState={formState} />}\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Form from './components/Form'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Form />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}